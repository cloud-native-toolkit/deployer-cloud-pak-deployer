---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibmcloud-secrets-manager-get
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: IBM Cloud
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: cli
    tekton.dev/displayName: "IBM Cloud Secrets Manager Get Secret"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task retrieves a secret from IBM Cloud Secrets Manager using a key ID
  params:
    - name: KEY_ID
      description: An IBM Cloud Secrets Manager key ID
      type: string
      default: 968d7819-f2c5-7b67-c420-3c6bfd51521e
    - name: SECRETS_MANAGER_ENDPOINT_URL
      description: An IBM Cloud Secrets Manager instance endpoint URL (https://cloud.ibm.com/apidocs/secrets-manager/secrets-manager-v2#endpoints)
      type: string
      default: https://{instance_ID}.us-south.secrets-manager.appdomain.cloud
  results:
    - name: secret-value
      description: A secret value retrieved using the provided KEY_ID
  steps:
    - name: retrieve-key
      image: quay.io/openshift/origin-cli:4.7
      script: |
        #!/usr/bin/env bash

        # Retrives the IBM Cloud API Key configured in a `deployer` cluster
        export IBMCLOUD_API_KEY=$(oc get secret ibm-secret -n kube-system -o jsonpath='{.data.apiKey}' | base64 -d)
        export AUTH_RESPONSE_JSON=$(curl -s -X POST \
          "https://iam.cloud.ibm.com/identity/token" \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --header 'Accept: application/json' \
          --data-urlencode 'grant_type=urn:ibm:params:oauth:grant-type:apikey' \
          --data-urlencode "apikey=${IBMCLOUD_API_KEY}")
        export ACCESS_TOKEN=$(echo $AUTH_RESPONSE_JSON | grep -o '"access_token":"[^"]*' | grep -o '[^"]*$')
        export SECRET_JSON=$(curl -s -X GET --location --header "Authorization: Bearer ${ACCESS_TOKEN}" --header "Accept: application/json" "$(params.SECRETS_MANAGER_ENDPOINT_URL)/api/v2/secrets/$(params.KEY_ID)")
        export SECRET=$(echo $SECRET_JSON |  grep -o '"payload":"[^"]*' | grep -o '[^"]*$')
        echo $SECRET | tee $(results.secret-value.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: openshift-client
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Openshift
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: cli
    tekton.dev/displayName: "openshift client"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task runs commands against the cluster where the task run is
    being executed.
    OpenShift is a Kubernetes distribution from Red Hat which provides oc,
    the OpenShift CLI that complements kubectl for simplifying deployment
    and configuration applications on OpenShift.
  params:
    - name: SCRIPT
      description: The OpenShift CLI arguments to run
      type: string
      default: "oc $@"
    - name: ARGS
      description: The OpenShift CLI arguments to run
      type: array
      default:
        - "help"
    - name: VERSION
      description: The OpenShift Version to use
      type: string
      default: "4.10"
  resources:
    inputs:
      - name: source
        type: git
        optional: true
  results:
    - name: oc-output
      description: The output of the oc command
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:$(params.VERSION)
      script: "$(params.SCRIPT)"
      args:
        - "$(params.ARGS)"
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cloud-pak-deployer
spec:
  params:
    - name: namespace
      type: string
      description: Namespace for Cloud Pak Deployer deployment
      default: "cloud-pak-deployer"
    - name: storage-class
      type: string
      description: RWX storage class needed for cp4d
      default: "ocs-storagecluster-cephfs"
    - name: ocp-client-version
      type: string
      description: Openshift client version
      default: "4.10"
  tasks:
    - name: add-namespace
      taskRef:
        name: openshift-client
      params:
        - name: ARGS
          value: [$(params.namespace)]
        - name: VERSION
          value: $(params.ocp-client-version)
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Namespace
            metadata:
              creationTimestamp: null
              name: $1
            EOF
    - name: add-sa
      taskRef:
        name: openshift-client
      runAfter:
        - add-namespace
      params:
        - name: ARGS
          value: [$(params.namespace)]
        - name: VERSION
          value: $(params.ocp-client-version)
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: cloud-pak-deployer-sa
              namespace: $1
            EOF
    - name: add-sa-permissions
      taskRef:
        name: openshift-client
      runAfter:
        - add-sa
      params:
        - name: ARGS
          value: [$(params.namespace)]
        - name: VERSION
          value: $(params.ocp-client-version)
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: system:openshift:scc:privileged
              namespace: $1
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: system:openshift:scc:privileged
            subjects:
            - kind: ServiceAccount
              name: cloud-pak-deployer-sa
              namespace: $1
            EOF
    - name: bind-sa-permissions
      taskRef:
        name: openshift-client
      runAfter:
        - add-sa-permissions
      params:
        - name: ARGS
          value: [$(params.namespace)]
        - name: VERSION
          value: $(params.ocp-client-version)
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: cloud-pak-deployer-cluster-admin
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cluster-admin
            subjects:
            - kind: ServiceAccount
              name: cloud-pak-deployer-sa
              namespace: $1
            EOF
    - name: create-pvc
      taskRef:
        name: openshift-client
      runAfter:
        - bind-sa-permissions
      params:
        - name: ARGS
          value: [$(params.namespace), $(params.storage-class)]
        - name: VERSION
          value: $(params.ocp-client-version)
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF
            apiVersion: v1 
            kind: PersistentVolumeClaim
            metadata:
              name: cloud-pak-deployer-status
              namespace: $1
            spec:
              accessModes:
              - ReadWriteMany
              storageClassName: $2
              resources:
                requests:
                  storage: 10Gi
            EOF
    - name: get-ibm-entitlement-key
      params:
        - name: KEY_ID
          value: 968d7819-f2c5-7b67-c420-3c6bfd51521e
        - name: SECRETS_MANAGER_ENDPOINT_URL
          value: >-
            https://afa20521-cd75-4864-843f-e59fd0ffd49d.us-south.secrets-manager.appdomain.cloud
      taskRef:
        kind: Task
        name: ibmcloud-secrets-manager-get
      runAfter:
        - create-pvc
    - name: set-entitlement-key
      taskRef:
        name: openshift-client
      runAfter:
        - get-ibm-entitlement-key
      params:
        - name: ARGS
          value:
            [
              $(params.namespace),
              $(tasks.get-ibm-entitlement-key.results.secret-value),
            ]
        - name: VERSION
          value: $(params.ocp-client-version)
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF
            apiVersion: v1
            kind: Secret
            metadata:
              name: cloud-pak-entitlement-key
              namespace: $1
            type: Opaque
            stringData:
              cp-entitlement-key: |
                $2
            EOF
